package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash83c556 marshals for hash
func (z *Header) MarshalHash83c556() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize83c556())
	// map header, size 6
	o = append(o, 0x86)
	if oTemp, err := z.GenesisHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.MerkleRoot.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.ParentHash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Producer.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendTime(o, z.Timestamp)
	o = hsp.AppendInt32(o, z.Version)
	return
}

// Msgsize83c556 returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Header) Msgsize83c556() (s int) {
	s = 1 + 12 + z.GenesisHash.Msgsize() + 11 + z.MerkleRoot.Msgsize() + 11 + z.ParentHash.Msgsize() + 9 + z.Producer.Msgsize() + 10 + hsp.TimeSize + 8 + hsp.Int32Size
	return
}
