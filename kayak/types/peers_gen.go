package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *Peers) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 5
	o = append(o, 0x85)
	if oTemp, err := z.DatabaseID.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendUint64(o, z.LastCompletedIndex)
	if oTemp, err := z.Leader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if z.Servers == nil {
		o = hsp.AppendNil(o)
	} else {
		if oTemp, err := z.Servers.MarshalHash(); err != nil {
			return nil, err
		} else {
			o = hsp.AppendBytes(o, oTemp)
		}
	}
	o = hsp.AppendUint64(o, z.Term)
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Peers) Msgsize() (s int) {
	s = 1 + 11 + z.DatabaseID.Msgsize() + 19 + hsp.Uint64Size + 7 + z.Leader.Msgsize() + 8
	if z.Servers == nil {
		s += hsp.NilSize
	} else {
		s += z.Servers.Msgsize()
	}
	s += 5 + hsp.Uint64Size
	return
}

// MarshalHash marshals for hash
func (z *SignedPeers) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 4
	o = append(o, 0x84)
	if oTemp, err := z.Hash.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	if oTemp, err := z.Peers.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = hsp.AppendArrayHeader(o, uint32(len(z.Signatures)))
	for za0002 := range z.Signatures {
		if z.Signatures[za0002] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.Signatures[za0002].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	o = hsp.AppendArrayHeader(o, uint32(len(z.Signees)))
	for za0001 := range z.Signees {
		if z.Signees[za0001] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.Signees[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedPeers) Msgsize() (s int) {
	s = 1 + 5 + z.Hash.Msgsize() + 6 + z.Peers.Msgsize() + 11 + hsp.ArrayHeaderSize
	for za0002 := range z.Signatures {
		if z.Signatures[za0002] == nil {
			s += hsp.NilSize
		} else {
			s += z.Signatures[za0002].Msgsize()
		}
	}
	s += 8 + hsp.ArrayHeaderSize
	for za0001 := range z.Signees {
		if z.Signees[za0001] == nil {
			s += hsp.NilSize
		} else {
			s += z.Signees[za0001].Msgsize()
		}
	}
	return
}
